{"version":3,"sources":["lib/globalstore.js","assets/gameover.PNG","Board/Board.jsx","lib/utils.js","Gameover/Gameover.jsx","Start/Start.jsx","App.js","index.js"],"names":["gameMode","start","game","end","activity","countdown","gameReducer","state","action","type","console","log","StoreContext","createContext","useStoreContext","useContext","StoreProvider","props","useReducer","dispatch","Provider","value","LinkedListNode","this","next","LinkedList","node","head","tail","Direction","getStartingSnakeLLValue","board","rowSize","length","colSize","startingRow","Math","round","startingCol","row","col","cell","createBoard","BOARD_SIZE","counter","currentRow","push","getCoordsInDirection","coords","direction","isOutOfBounds","getDirectionFromKey","key","getNextNodeDirection","currentDirection","currentCol","nextRow","nextCol","getGrowthNodeCoords","snakeTail","tailNextNodeDirection","growthDirection","getOppositeDirection","currentTailCoords","getCellClassName","cellValue","foodCell","foodShouldReverseDirection","snakeCells","className","has","Board","useState","score","setScore","snake","setSnake","Set","setSnakeCells","setFoodCell","setDirection","setFoodShouldReverseDirection","useEffect","window","addEventListener","e","handleKeydown","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","moveSnake","newDirection","size","currentHeadCoords","nextHeadCoords","handleGameOver","nextHeadCell","newHead","currentHead","newSnakeCells","delete","add","growSnake","reverseSnake","handleFoodConsumption","growthNodeCoords","newTailCell","newTail","currentTail","previousNode","currentNode","nextNode","reverseLinkedList","snakeHead","nextFoodCell","min","max","floor","random","nextFoodShouldReverseDirection","snakeLLStartingValue","map","rowIdx","cellIdx","GameOver","style","display","onClick","src","Gameover","alt","Start","setCounter","setTimeout","opacity","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a75ee92.chunk.js","sourcesContent":["import { useContext, createContext, useReducer } from 'react';\r\n\r\nconst gameMode = {\r\n    start: true, game: false, end: false, activity: false, countdown: false\r\n}\r\n\r\nconst gameReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"START_SCREEN\":\r\n            return { ...state, start: true, game: false, activity: false, end: false, countdown: false}\r\n        case \"GAME_BOARD\":\r\n            return { ...state, start: false, game: true, activity: false, end: false, countdown: true}\r\n        case \"GAME_START\":\r\n            return { ...state, start: false, game: true, activity: true, end: false, countdown: false}\r\n        case \"GAMEOVER\":\r\n            return { ...state, start: false, game: false, activity: false, end: true, countdown: false}\r\n        default:\r\n            console.log(`Invalide action type: ${action.type}`)\r\n            return state\r\n    }\r\n}\r\n\r\nconst StoreContext = createContext()\r\n\r\nconst useStoreContext = function(){\r\n    return useContext(StoreContext)\r\n}\r\n\r\nconst StoreProvider = function(props){\r\n    const [state, dispatch] = useReducer( gameReducer, gameMode )\r\n    return <StoreContext.Provider value={[state, dispatch]} {...props}/>\r\n}\r\n\r\nexport { StoreProvider, useStoreContext }","export default __webpack_public_path__ + \"static/media/gameover.a5422d4b.PNG\";","import React, {useEffect, useState} from 'react';\nimport { useStoreContext } from '../lib/globalstore'\nimport {\n  randomIntFromInterval,\n  reverseLinkedList,\n  useInterval,\n} from '../lib/utils.js';\nimport Gameover from '../assets/gameover.PNG'\n\n\nimport './Board.css';\n\n/**\n * TODO: add a more elegant UX for before a game starts and after a game ends.\n * A game probably shouldn't start until the user presses an arrow key, and\n * once a game is over, the board state should likely freeze until the user\n * intentionally restarts the game.\n */\n\nclass LinkedListNode {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nclass LinkedList {\n  constructor(value) {\n    const node = new LinkedListNode(value);\n    this.head = node;\n    this.tail = node;\n  }\n}\n\nconst Direction = {\n  UP: 'UP',\n  RIGHT: 'RIGHT',\n  DOWN: 'DOWN',\n  LEFT: 'LEFT',\n};\n\nconst BOARD_SIZE = 15;\nconst PROBABILITY_OF_DIRECTION_REVERSAL_FOOD = 0.3;\n\nconst getStartingSnakeLLValue = board => {\n  const rowSize = board.length;\n  const colSize = board[0].length;\n  const startingRow = Math.round(rowSize / 3);\n  const startingCol = Math.round(colSize / 3);\n  const startingCell = board[startingRow][startingCol];\n  return {\n    row: startingRow,\n    col: startingCol,\n    cell: startingCell,\n  };\n};\n\nconst Board = () => {\n  const [score, setScore] = useState(0);\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [snake, setSnake] = useState(\n    new LinkedList(getStartingSnakeLLValue(board)),\n  );\n  const [snakeCells, setSnakeCells] = useState(\n    new Set([snake.head.value.cell]),\n  );\n  // Naively set the starting food cell 5 cells away from the starting snake cell.\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\n  const [direction, setDirection] = useState(Direction.RIGHT);\n  const [foodShouldReverseDirection, setFoodShouldReverseDirection] = useState(\n    false,\n  );\n  const [{activity, start, game, end}, dispatch] = useStoreContext()\n\n  useEffect(() => {\n    window.addEventListener('keydown', e => {\n      handleKeydown(e);\n    });\n  }, []);\n\n  // `useInterval` is needed; you can't naively do `setInterval` in the\n  // `useEffect` above. See the article linked above the `useInterval`\n  // definition for details.\n  useInterval(() => {\n    if (activity) moveSnake();\n  }, 150);\n\n  const handleKeydown = e => {\n    const newDirection = getDirectionFromKey(e.key);\n    const isValidDirection = newDirection !== '';\n    if (!isValidDirection) return;\n    const snakeWillRunIntoItself =\n      getOppositeDirection(newDirection) === direction && snakeCells.size > 1;\n    // Note: this functionality is currently broken, for the same reason that\n    // `useInterval` is needed. Specifically, the `direction` and `snakeCells`\n    // will currently never reflect their \"latest version\" when `handleKeydown`\n    // is called. I leave it as an exercise to the viewer to fix this :P\n    if (snakeWillRunIntoItself) return;\n    setDirection(newDirection);\n  };\n\n  const moveSnake = () => {\n      const currentHeadCoords = {\n        row: snake.head.value.row,\n        col: snake.head.value.col,\n      };\n\n      const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\n      if (isOutOfBounds(nextHeadCoords, board)) {\n        handleGameOver();\n        return;\n      }\n      const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n      if (snakeCells.has(nextHeadCell)) {\n        handleGameOver();\n        return;\n      }\n\n      const newHead = new LinkedListNode({\n        row: nextHeadCoords.row,\n        col: nextHeadCoords.col,\n        cell: nextHeadCell,\n      });\n      const currentHead = snake.head;\n      snake.head = newHead;\n      currentHead.next = newHead;\n\n      const newSnakeCells = new Set(snakeCells);\n      newSnakeCells.delete(snake.tail.value.cell);\n      newSnakeCells.add(nextHeadCell);\n\n      snake.tail = snake.tail.next;\n      if (snake.tail === null) snake.tail = snake.head;\n\n      const foodConsumed = nextHeadCell === foodCell;\n      if (foodConsumed) {\n        // This function mutates newSnakeCells.\n        growSnake(newSnakeCells);\n        if (foodShouldReverseDirection) reverseSnake();\n        handleFoodConsumption(newSnakeCells);\n      }\n    \n    setSnakeCells(newSnakeCells);\n  };\n\n  // This function mutates newSnakeCells.\n  const growSnake = newSnakeCells => {\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\n    if (isOutOfBounds(growthNodeCoords, board)) {\n      // Snake is positioned such that it can't grow; don't do anything.\n      return;\n    }\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\n    const newTail = new LinkedListNode({\n      row: growthNodeCoords.row,\n      col: growthNodeCoords.col,\n      cell: newTailCell,\n    });\n    const currentTail = snake.tail;\n    snake.tail = newTail;\n    snake.tail.next = currentTail;\n\n    newSnakeCells.add(newTailCell);\n  };\n\n  const reverseSnake = () => {\n    const tailNextNodeDirection = getNextNodeDirection(snake.tail, direction);\n    const newDirection = getOppositeDirection(tailNextNodeDirection);\n    setDirection(newDirection);\n\n    // The tail of the snake is really the head of the linked list, which\n    // is why we have to pass the snake's tail to `reverseLinkedList`.\n    reverseLinkedList(snake.tail);\n    const snakeHead = snake.head;\n    snake.head = snake.tail;\n    snake.tail = snakeHead;\n  };\n\n  const handleFoodConsumption = newSnakeCells => {\n    const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\n    let nextFoodCell;\n    // In practice, this will never be a time-consuming operation. Even\n    // in the extreme scenario where a snake is so big that it takes up 90%\n    // of the board (nearly impossible), there would be a 10% chance of generating\n    // a valid new food cell--so an average of 10 operations: trivial.\n    while (true) {\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell)\n        continue;\n      break;\n    }\n\n    const nextFoodShouldReverseDirection =\n      Math.random() < PROBABILITY_OF_DIRECTION_REVERSAL_FOOD;\n\n    setFoodCell(nextFoodCell);\n    setFoodShouldReverseDirection(nextFoodShouldReverseDirection);\n    setScore(score + 1);\n  };\n\n  const handleGameOver = () => {\n    setScore(0);\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\n    setSnake(new LinkedList(snakeLLStartingValue));\n    setFoodCell(snakeLLStartingValue.cell + 5);\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\n    dispatch({type:\"GAMEOVER\"})\n  };\n\n  return (\n    <>\n    <div>\n      <h1>Score: {score}</h1>\n      <div className=\"board\">\n        {board.map((row, rowIdx) => (\n          <div key={rowIdx} className=\"row\">\n            {row.map((cellValue, cellIdx) => {\n              const className = getCellClassName(\n                cellValue,\n                foodCell,\n                foodShouldReverseDirection,\n                snakeCells,\n              );\n              return <div key={cellIdx} className={className}></div>;\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n    </>\n  );\n};\n\nconst createBoard = BOARD_SIZE => {\n  let counter = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push(counter++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\n\nconst getCoordsInDirection = (coords, direction) => {\n  if (direction === Direction.UP) {\n    return {\n      row: coords.row - 1,\n      col: coords.col,\n    };\n  }\n  if (direction === Direction.RIGHT) {\n    return {\n      row: coords.row,\n      col: coords.col + 1,\n    };\n  }\n  if (direction === Direction.DOWN) {\n    return {\n      row: coords.row + 1,\n      col: coords.col,\n    };\n  }\n  if (direction === Direction.LEFT) {\n    return {\n      row: coords.row,\n      col: coords.col - 1,\n    };\n  }\n};\n\nconst isOutOfBounds = (coords, board) => {\n  const {row, col} = coords;\n  if (row < 0 || col < 0) return true;\n  if (row >= board.length || col >= board[0].length) return true;\n  return false;\n};\n\nconst getDirectionFromKey = key => {\n  if (key === 'ArrowUp') return Direction.UP;\n  if (key === 'ArrowRight') return Direction.RIGHT;\n  if (key === 'ArrowDown') return Direction.DOWN;\n  if (key === 'ArrowLeft') return Direction.LEFT;\n  return '';\n};\n\nconst getNextNodeDirection = (node, currentDirection) => {\n  if (node.next === null) return currentDirection;\n  const {row: currentRow, col: currentCol} = node.value;\n  const {row: nextRow, col: nextCol} = node.next.value;\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\n    return Direction.RIGHT;\n  }\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\n    return Direction.LEFT;\n  }\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\n    return Direction.DOWN;\n  }\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\n    return Direction.UP;\n  }\n  return '';\n};\n\nconst getGrowthNodeCoords = (snakeTail, currentDirection) => {\n  const tailNextNodeDirection = getNextNodeDirection(\n    snakeTail,\n    currentDirection,\n  );\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\n  const currentTailCoords = {\n    row: snakeTail.value.row,\n    col: snakeTail.value.col,\n  };\n  const growthNodeCoords = getCoordsInDirection(\n    currentTailCoords,\n    growthDirection,\n  );\n  return growthNodeCoords;\n};\n\nconst getOppositeDirection = direction => {\n  if (direction === Direction.UP) return Direction.DOWN;\n  if (direction === Direction.RIGHT) return Direction.LEFT;\n  if (direction === Direction.DOWN) return Direction.UP;\n  if (direction === Direction.LEFT) return Direction.RIGHT;\n};\n\nconst getCellClassName = (\n  cellValue,\n  foodCell,\n  foodShouldReverseDirection,\n  snakeCells,\n) => {\n  let className = 'cell';\n  if (cellValue === foodCell) {\n    if (foodShouldReverseDirection) {\n      className = 'cell cell-purple';\n    } else {\n      className = 'cell cell-red';\n    }\n  }\n  if (snakeCells.has(cellValue)) className = 'cell cell-green';\n\n  return className;\n};\n\nexport default Board;\n","import {useEffect, useRef} from 'react';\n\n// Copied from https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nexport function randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport function reverseLinkedList(head) {\n  let previousNode = null;\n  let currentNode = head;\n  while (currentNode !== null) {\n    const nextNode = currentNode.next;\n    currentNode.next = previousNode;\n    previousNode = currentNode;\n    currentNode = nextNode;\n  }\n  return previousNode;\n}\n","import Gameover from '../assets/gameover.PNG'\r\nimport { useStoreContext } from '../lib/globalstore'\r\nimport { useState, useEffect } from 'react'\r\nimport './gameover.css'\r\n\r\nfunction GameOver(){\r\n    const [{ end, countdown }, dispatch] = useStoreContext()\r\n    // const [counter, setCounter] = useState(35)\r\n\r\n    // useEffect(()=>{\r\n    //     if(countdown) counter > 0 && setTimeout(() => setCounter(counter - 1), 100)\r\n    //     if (counter < 1) {\r\n    //         dispatch({type:'GAME_START'})\r\n    //         setCounter(35)\r\n    //     }\r\n    // }, [countdown, counter])\r\n\r\n    // function restartGame(){\r\n    //     dispatch({type:\"GAME_BOARD\"})\r\n    // }\r\n\r\n    function startScreen() {\r\n        dispatch({type:\"START_SCREEN\"})\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"gameoverContainer\" style={{display: end ? 'block' : 'none'}}>\r\n            <div className=\"dropGameover\">\r\n                <div>\r\n                    <button onClick={startScreen}>Start screen</button>\r\n                    {/* <button onClick={restartGame}>Restart</button> */}\r\n                </div>\r\n            <img src={Gameover} alt='Gameover' className=\"goImg\"/>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GameOver","import { useStoreContext } from '../lib/globalstore'\r\nimport Board from '../Board/Board'\r\nimport Gameover from '../Gameover/Gameover'\r\nimport { useEffect, useState } from 'react'\r\nimport './Start.css'\r\n\r\nfunction Start(){\r\n\r\n    const [{start, countdown}, dispatch] = useStoreContext()\r\n    const [counter, setCounter] = useState(35)\r\n\r\n    useEffect(()=>{\r\n        if(countdown) counter > 0 && setTimeout(() => setCounter(counter - 1), 100)\r\n        if (counter < 1) {\r\n            dispatch({type:'GAME_START'})\r\n            setCounter(35)\r\n        }\r\n    }, [countdown, counter])\r\n\r\n    function closeStart(){\r\n        dispatch({type:\"GAME_BOARD\"})\r\n    }\r\n\r\n    return(\r\n        <div className=\"bigContainer\">\r\n            <div className=\"countdownBox\" style={{display: countdown ? 'block' : 'none'}}>\r\n                <div className=\"countdownTimer\" style={{ display: counter > 25 ? 'block' : 'none', opacity: counter === 35 ? '1' : '.5'}}>3</div>\r\n                <div className=\"countdownTimer\" style={{ display: counter <= 25 && counter > 15 ? 'block' : 'none', opacity: counter === 25 ? '1' : '.5'}}>2</div>\r\n                <div className=\"countdownTimer\" style={{ display: counter <= 15 && counter > 5 ? 'block' : 'none', opacity: counter === 15 ? '1' : '.5'}}>1</div>\r\n                <div className=\"countdownTimer\" style={{ display: counter <= 5 ? 'block' : 'none'}}>Go!</div>\r\n            </div>\r\n            <div className=\"startContainer\" style={{display: start ? 'block' : 'none'}}>\r\n                <div className=\"dropStart\">\r\n                    <button onClick={closeStart}>Start</button>\r\n                </div>\r\n            </div>\r\n            <Gameover/>\r\n            <Board/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Start","import React from 'react'\nimport Start from './Start/Start'\n\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <>\n    <div className=\"App\">\n      <Start/>\n    </div>\n    </>\n    )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { StoreProvider} from './lib/globalstore'\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider>\n      <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}