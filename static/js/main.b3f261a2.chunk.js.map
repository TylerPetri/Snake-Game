{"version":3,"sources":["Board/Board.jsx","App.js","index.js"],"names":["LinkedListNode","value","this","next","LinkedList","node","head","tail","Cell","row","col","Direction","createBoard","BOARD_SIZE","counter","board","currentRow","push","getDirectionFromKey","key","Board","useState","Set","snakeCells","setSnakeCells","snake","direction","setDirection","useEffect","window","addEventListener","e","newDirection","console","log","getNextHeadCoords","currentHeadCoords","onClick","nextHeadCoords","nextHeadValue","newHead","newSnakeCells","delete","add","moveSnake","className","map","rowIdx","cellValue","cellIdx","has","App","ReactDOM","render","document","getElementById"],"mappings":"oPAKMA,EACF,WAAYC,GAAQ,oBAChBC,KAAKD,MAAQA,EACbC,KAAKC,KAAO,MAIdC,EACF,WAAYH,GAAQ,oBAChB,IAAMI,EAAO,IAAIL,EAAeC,GAChCC,KAAKI,KAAOD,EACZH,KAAKK,KAAOF,GAIdG,EACF,WAAYC,EAAKC,EAAKT,GAAQ,oBAC1BC,KAAKO,IAAMA,EACXP,KAAKQ,IAAMA,EACXR,KAAKD,MAAQA,GAMfU,EACE,KADFA,EAEK,QAFLA,EAGI,OAHJA,EAII,OAwFJC,EAAc,SAAAC,GAGhB,IAFA,IAAIC,EAAU,EACRC,EAAQ,GACLN,EAAM,EAAGA,EAAMI,EAAYJ,IAAO,CAEvC,IADA,IAAMO,EAAa,GACVN,EAAM,EAAGA,EAAMG,EAAYH,IAChCM,EAAWC,KAAKH,KAEpBC,EAAME,KAAKD,GAEf,OAAOD,GAGLG,EAAsB,SAAAC,GACxB,MAAY,YAARA,EAA0BR,EAClB,eAARQ,EAA6BR,EACrB,cAARQ,EAA4BR,EACpB,cAARQ,EAA4BR,EACzB,IAGIS,EAzGD,WAAO,IAAD,EACUC,mBAAST,EAXpB,KAUC,mBACTG,EADS,aAEoBM,mBAAS,IAAIC,IAAI,CAAC,OAFtC,mBAETC,EAFS,KAEGC,EAFH,OAGUH,mBAAS,IAAIjB,EAAY,IAAII,EAAK,EAAG,EAAG,MAHlD,mBAGTiB,EAHS,aAIkBJ,mBAASV,IAJ3B,mBAITe,EAJS,KAIEC,EAJF,KAOhBC,qBAAU,WAGNC,OAAOC,iBAAiB,WAAW,SAAAC,GAC/B,IAAMC,EAAed,EAAoBa,EAAEZ,KACD,KAAjBa,GACHL,EAAaK,GACnCC,QAAQC,IAAIF,QAElB,IAyBF,IAAMG,EAAoB,SAACC,EAAmBV,GAC1C,OAAIA,GAAaf,EACN,CACHF,IAAK2B,EAAkB3B,IAAK,EAC5BC,IAAK0B,EAAkB1B,KAG3BgB,IAAcf,EACP,CACHF,IAAK2B,EAAkB3B,IACvBC,IAAK0B,EAAkB1B,IAAK,GAGhCgB,IAAcf,EACP,CACHF,IAAK2B,EAAkB3B,IACvBC,IAAK0B,EAAkB1B,IAAK,GAGhCgB,IAAcf,EACP,CACHF,IAAK2B,EAAkB3B,IAAK,EAC5BC,IAAK0B,EAAkB1B,UAH/B,GAQJ,OACI,qCACA,wBAAQ2B,QAAS,kBApDrB,WACI,IAAMD,EAAoB,CACtB3B,IAAKgB,EAAMnB,KAAKL,MAAMQ,IACtBC,IAAKe,EAAMnB,KAAKL,MAAMS,KAGpB4B,EAAiBH,EAAkBC,EAAmBV,GACtDa,EAAgBxB,EAAMuB,EAAe7B,KAAK6B,EAAe5B,KACzD8B,EAAU,IAAIxC,EAChB,IAAIQ,EAAK8B,EAAe7B,IAAK6B,EAAe5B,IAAK6B,IAG/CE,EAAgB,IAAInB,IAAIC,GAC9BkB,EAAcC,OAAOjB,EAAMlB,KAAKN,MAAMA,OACtCwC,EAAcE,IAAIJ,GAElBd,EAAMnB,KAAOkC,EACbf,EAAMlB,KAAOkB,EAAMlB,KAAKJ,KACL,OAAfsB,EAAMlB,OAAekB,EAAMlB,KAAOkB,EAAMnB,MAE5CkB,EAAciB,GAgCSG,IAAvB,2BACA,qBAAKC,UAAU,QAAf,SACK9B,EAAM+B,KAAI,SAACrC,EAAKsC,GAAN,OACP,qBAAkBF,UAAU,MAA5B,SACIpC,EAAIqC,KAAI,SAACE,EAAWC,GAAZ,OACJ,qBAAmBJ,UAAS,eAAUtB,EAAW2B,IAAIF,GAAa,aAAe,KAAvEC,OAFRF,YCpGXI,EARH,WACV,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,OCANO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b3f261a2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport './Board.css'\r\n\r\n\r\nclass LinkedListNode {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.next = null;\r\n    }\r\n}\r\n\r\nclass LinkedList {\r\n    constructor(value) {\r\n        const node = new LinkedListNode(value);\r\n        this.head = node;\r\n        this.tail = node;\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    constructor(row, col, value) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nconst BOARD_SIZE = 10;\r\n\r\nconst Direction = {\r\n    UP: 'UP',\r\n    RIGHT: 'RIGHT',\r\n    DOWN: 'DOWN',\r\n    LEFT: 'LEFT',\r\n}\r\n\r\n\r\nconst Board = () => {\r\n    const [board, setBoard] = useState(createBoard(BOARD_SIZE))\r\n    const [snakeCells, setSnakeCells] = useState(new Set([44]));\r\n    const [snake, setSnake] = useState(new LinkedList( new Cell(4, 3, 44)));\r\n    const [direction, setDirection] = useState(Direction.RIGHT)\r\n\r\n\r\n    useEffect(() => {\r\n        // setInterval(() => {},1000)\r\n    \r\n        window.addEventListener('keydown', e => {\r\n            const newDirection = getDirectionFromKey(e.key);\r\n            const isValidDirection = newDirection !== '';\r\n            if (isValidDirection) setDirection(newDirection);\r\n            console.log(newDirection)\r\n        })\r\n    },[])\r\n\r\n    function moveSnake () {\r\n        const currentHeadCoords = {\r\n            row: snake.head.value.row,\r\n            col: snake.head.value.col,\r\n        }\r\n\r\n        const nextHeadCoords = getNextHeadCoords(currentHeadCoords, direction);\r\n        const nextHeadValue = board[nextHeadCoords.row][nextHeadCoords.col];\r\n        const newHead = new LinkedListNode(\r\n            new Cell(nextHeadCoords.row, nextHeadCoords.col, nextHeadValue)\r\n        )\r\n\r\n        const newSnakeCells = new Set(snakeCells);\r\n        newSnakeCells.delete(snake.tail.value.value);\r\n        newSnakeCells.add(nextHeadValue)\r\n\r\n        snake.head = newHead;\r\n        snake.tail = snake.tail.next;\r\n        if (snake.tail === null) snake.tail = snake.head;\r\n\r\n        setSnakeCells(newSnakeCells)\r\n    }\r\n\r\n    const getNextHeadCoords = (currentHeadCoords, direction) => {\r\n        if (direction == Direction.UP) {\r\n            return {\r\n                row: currentHeadCoords.row -1,\r\n                col: currentHeadCoords.col,\r\n            }\r\n        }\r\n        if (direction === Direction.RIGHT) {\r\n            return {\r\n                row: currentHeadCoords.row,\r\n                col: currentHeadCoords.col +1,\r\n            }\r\n        }\r\n        if (direction === Direction.LEFT) {\r\n            return {\r\n                row: currentHeadCoords.row,\r\n                col: currentHeadCoords.col -1,\r\n            }\r\n        }\r\n        if (direction === Direction.DOWN) {\r\n            return {\r\n                row: currentHeadCoords.row +1,\r\n                col: currentHeadCoords.col,\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <button onClick={() => moveSnake()}>Move Manually</button>\r\n        <div className=\"board\">\r\n            {board.map((row, rowIdx) => (\r\n                <div key={rowIdx} className=\"row\">{\r\n                    row.map((cellValue, cellIdx) => (\r\n                        <div key={cellIdx} className={`cell ${snakeCells.has(cellValue) ? 'snake-cell' : ''}`}></div>\r\n                    ))\r\n                }</div>\r\n            ))}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst createBoard = BOARD_SIZE => {\r\n    let counter = 1;\r\n    const board = [];\r\n    for (let row = 0; row < BOARD_SIZE; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < BOARD_SIZE; col++) {\r\n            currentRow.push(counter++);\r\n        }\r\n        board.push(currentRow);\r\n    }\r\n    return board\r\n}\r\n\r\nconst getDirectionFromKey = key => {\r\n    if (key === 'ArrowUp') return Direction.UP;\r\n    if (key === 'ArrowRight') return Direction.RIGHT;\r\n    if (key === 'ArrowLeft') return Direction.LEFT;\r\n    if (key === 'ArrowDown') return Direction.DOWN;\r\n    return '';\r\n}\r\n\r\nexport default Board;","import './App.css';\nimport Board from './Board/Board';\n\nconst App = () => {\n  return(\n    <div className=\"App\">\n      <Board></Board>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}