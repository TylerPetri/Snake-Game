{"version":3,"sources":["lib/globalstore.js","assets/gameover.PNG","Board/Board.jsx","lib/utils.js","Gameover/Gameover.jsx","App.js","index.js"],"names":["gameMode","start","game","end","gameReducer","state","action","type","console","log","StoreContext","createContext","useStoreContext","useContext","StoreProvider","props","useReducer","dispatch","Provider","value","LinkedListNode","this","next","LinkedList","node","head","tail","Direction","createBoard","BOARD_SIZE","counter","board","row","currentRow","col","push","getCoordsInDirection","coords","direction","isOutOfBounds","length","getDirectionFromKey","key","getNextNodeDirection","currentDirection","currentCol","nextRow","nextCol","getGrowthNodeCoords","snakeTail","tailNextNodeDirection","growthDirection","getOppositeDirection","currentTailCoords","getCellClassName","cellValue","foodCell","foodShouldReverseDirection","snakeCells","className","has","Board","useState","score","setScore","rowSize","colSize","startingRow","Math","round","startingCol","cell","getStartingSnakeLLValue","snake","Set","setSnakeCells","setFoodCell","setDirection","setFoodShouldReverseDirection","gameOver","activity","setActivity","useEffect","window","addEventListener","e","handleKeydown","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","moveSnake","newDirection","size","currentHeadCoords","nextHeadCoords","handleGameOver","nextHeadCell","newHead","currentHead","newSnakeCells","delete","add","growSnake","reverseSnake","handleFoodConsumption","growthNodeCoords","newTailCell","newTail","currentTail","previousNode","currentNode","nextNode","reverseLinkedList","snakeHead","nextFoodCell","min","max","floor","random","nextFoodShouldReverseDirection","style","display","map","rowIdx","cellIdx","GameOver","src","Gameover","alt","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d9b260b.chunk.js","sourcesContent":["import { useContext, createContext, useReducer } from 'react';\r\n\r\nconst gameMode = {\r\n    start: false, game: true, end: false\r\n}\r\n\r\nconst gameReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"START_SCREEN\":\r\n            return { ...state, start: true, game: false, end: false}\r\n        case \"GAME_START\":\r\n            return { ...state, start: false, game: true, end: false}\r\n        case \"GAMEOVER\":\r\n            return { ...state, start: false, game: false, end: true}\r\n        default:\r\n            console.log(`Invalide action type: ${action.type}`)\r\n            return state\r\n    }\r\n}\r\n\r\nconst StoreContext = createContext()\r\n\r\nconst useStoreContext = function(){\r\n    return useContext(StoreContext)\r\n}\r\n\r\nconst StoreProvider = function(props){\r\n    const [state, dispatch] = useReducer( gameReducer, gameMode )\r\n    return <StoreContext.Provider value={[state, dispatch]} {...props}/>\r\n}\r\n\r\nexport { StoreProvider, useStoreContext }","export default __webpack_public_path__ + \"static/media/gameover.a5422d4b.PNG\";","import React, {useEffect, useState} from 'react';\nimport { useStoreContext } from '../lib/globalstore'\nimport {\n  randomIntFromInterval,\n  reverseLinkedList,\n  useInterval,\n} from '../lib/utils.js';\nimport Gameover from '../assets/gameover.PNG'\n\n\nimport './Board.css';\n\n/**\n * TODO: add a more elegant UX for before a game starts and after a game ends.\n * A game probably shouldn't start until the user presses an arrow key, and\n * once a game is over, the board state should likely freeze until the user\n * intentionally restarts the game.\n */\n\nclass LinkedListNode {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nclass LinkedList {\n  constructor(value) {\n    const node = new LinkedListNode(value);\n    this.head = node;\n    this.tail = node;\n  }\n}\n\nconst Direction = {\n  UP: 'UP',\n  RIGHT: 'RIGHT',\n  DOWN: 'DOWN',\n  LEFT: 'LEFT',\n};\n\nconst BOARD_SIZE = 15;\nconst PROBABILITY_OF_DIRECTION_REVERSAL_FOOD = 0.3;\n\nconst getStartingSnakeLLValue = board => {\n  const rowSize = board.length;\n  const colSize = board[0].length;\n  const startingRow = Math.round(rowSize / 3);\n  const startingCol = Math.round(colSize / 3);\n  const startingCell = board[startingRow][startingCol];\n  return {\n    row: startingRow,\n    col: startingCol,\n    cell: startingCell,\n  };\n};\n\nconst Board = () => {\n  const [score, setScore] = useState(0);\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [snake, setSnake] = useState(\n    new LinkedList(getStartingSnakeLLValue(board)),\n  );\n  const [snakeCells, setSnakeCells] = useState(\n    new Set([snake.head.value.cell]),\n  );\n  // Naively set the starting food cell 5 cells away from the starting snake cell.\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\n  const [direction, setDirection] = useState(Direction.RIGHT);\n  const [foodShouldReverseDirection, setFoodShouldReverseDirection] = useState(\n    false,\n  );\n  const [{game, gameOver}, dispatch] = useStoreContext()\n  const [activity, setActivity] = useState(true)\n\n  useEffect(() => {\n    window.addEventListener('keydown', e => {\n      handleKeydown(e);\n    });\n  }, []);\n\n  // `useInterval` is needed; you can't naively do `setInterval` in the\n  // `useEffect` above. See the article linked above the `useInterval`\n  // definition for details.\n  useInterval(() => {\n    if (activity) moveSnake();\n  }, 150);\n\n  const handleKeydown = e => {\n    const newDirection = getDirectionFromKey(e.key);\n    const isValidDirection = newDirection !== '';\n    if (!isValidDirection) return;\n    const snakeWillRunIntoItself =\n      getOppositeDirection(newDirection) === direction && snakeCells.size > 1;\n    // Note: this functionality is currently broken, for the same reason that\n    // `useInterval` is needed. Specifically, the `direction` and `snakeCells`\n    // will currently never reflect their \"latest version\" when `handleKeydown`\n    // is called. I leave it as an exercise to the viewer to fix this :P\n    if (snakeWillRunIntoItself) return;\n    setDirection(newDirection);\n  };\n\n  const moveSnake = () => {\n    const currentHeadCoords = {\n      row: snake.head.value.row,\n      col: snake.head.value.col,\n    };\n\n    const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\n    if (isOutOfBounds(nextHeadCoords, board)) {\n      handleGameOver();\n      return;\n    }\n    const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n    if (snakeCells.has(nextHeadCell)) {\n      handleGameOver();\n      return;\n    }\n\n    const newHead = new LinkedListNode({\n      row: nextHeadCoords.row,\n      col: nextHeadCoords.col,\n      cell: nextHeadCell,\n    });\n    const currentHead = snake.head;\n    snake.head = newHead;\n    currentHead.next = newHead;\n\n    const newSnakeCells = new Set(snakeCells);\n    newSnakeCells.delete(snake.tail.value.cell);\n    newSnakeCells.add(nextHeadCell);\n\n    snake.tail = snake.tail.next;\n    if (snake.tail === null) snake.tail = snake.head;\n\n    const foodConsumed = nextHeadCell === foodCell;\n    if (foodConsumed) {\n      // This function mutates newSnakeCells.\n      growSnake(newSnakeCells);\n      if (foodShouldReverseDirection) reverseSnake();\n      handleFoodConsumption(newSnakeCells);\n    }\n\n    setSnakeCells(newSnakeCells);\n  };\n\n  // This function mutates newSnakeCells.\n  const growSnake = newSnakeCells => {\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\n    if (isOutOfBounds(growthNodeCoords, board)) {\n      // Snake is positioned such that it can't grow; don't do anything.\n      return;\n    }\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\n    const newTail = new LinkedListNode({\n      row: growthNodeCoords.row,\n      col: growthNodeCoords.col,\n      cell: newTailCell,\n    });\n    const currentTail = snake.tail;\n    snake.tail = newTail;\n    snake.tail.next = currentTail;\n\n    newSnakeCells.add(newTailCell);\n  };\n\n  const reverseSnake = () => {\n    const tailNextNodeDirection = getNextNodeDirection(snake.tail, direction);\n    const newDirection = getOppositeDirection(tailNextNodeDirection);\n    setDirection(newDirection);\n\n    // The tail of the snake is really the head of the linked list, which\n    // is why we have to pass the snake's tail to `reverseLinkedList`.\n    reverseLinkedList(snake.tail);\n    const snakeHead = snake.head;\n    snake.head = snake.tail;\n    snake.tail = snakeHead;\n  };\n\n  const handleFoodConsumption = newSnakeCells => {\n    const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\n    let nextFoodCell;\n    // In practice, this will never be a time-consuming operation. Even\n    // in the extreme scenario where a snake is so big that it takes up 90%\n    // of the board (nearly impossible), there would be a 10% chance of generating\n    // a valid new food cell--so an average of 10 operations: trivial.\n    while (true) {\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell)\n        continue;\n      break;\n    }\n\n    const nextFoodShouldReverseDirection =\n      Math.random() < PROBABILITY_OF_DIRECTION_REVERSAL_FOOD;\n\n    setFoodCell(nextFoodCell);\n    setFoodShouldReverseDirection(nextFoodShouldReverseDirection);\n    setScore(score + 1);\n  };\n\n  const handleGameOver = () => {\n    // setScore(0);\n    // const snakeLLStartingValue = getStartingSnakeLLValue(board);\n    // setSnake(new LinkedList(snakeLLStartingValue));\n    // setFoodCell(snakeLLStartingValue.cell + 5);\n    // setSnakeCells(new Set([snakeLLStartingValue.cell]));\n    // setDirection(Direction.RIGHT);\n    dispatch({type:\"GAMEOVER\"})\n    setActivity(false)\n    console.log('gameover')\n  };\n\n  return (\n    <>\n    <div style={{display: game ? 'block' : 'none'}}>\n      <h1>Score: {score}</h1>\n      <div className=\"board\">\n        {board.map((row, rowIdx) => (\n          <div key={rowIdx} className=\"row\">\n            {row.map((cellValue, cellIdx) => {\n              const className = getCellClassName(\n                cellValue,\n                foodCell,\n                foodShouldReverseDirection,\n                snakeCells,\n              );\n              return <div key={cellIdx} className={className}></div>;\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n    </>\n  );\n};\n\nconst createBoard = BOARD_SIZE => {\n  let counter = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push(counter++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\n\nconst getCoordsInDirection = (coords, direction) => {\n  if (direction === Direction.UP) {\n    return {\n      row: coords.row - 1,\n      col: coords.col,\n    };\n  }\n  if (direction === Direction.RIGHT) {\n    return {\n      row: coords.row,\n      col: coords.col + 1,\n    };\n  }\n  if (direction === Direction.DOWN) {\n    return {\n      row: coords.row + 1,\n      col: coords.col,\n    };\n  }\n  if (direction === Direction.LEFT) {\n    return {\n      row: coords.row,\n      col: coords.col - 1,\n    };\n  }\n};\n\nconst isOutOfBounds = (coords, board) => {\n  const {row, col} = coords;\n  if (row < 0 || col < 0) return true;\n  if (row >= board.length || col >= board[0].length) return true;\n  return false;\n};\n\nconst getDirectionFromKey = key => {\n  if (key === 'ArrowUp') return Direction.UP;\n  if (key === 'ArrowRight') return Direction.RIGHT;\n  if (key === 'ArrowDown') return Direction.DOWN;\n  if (key === 'ArrowLeft') return Direction.LEFT;\n  return '';\n};\n\nconst getNextNodeDirection = (node, currentDirection) => {\n  if (node.next === null) return currentDirection;\n  const {row: currentRow, col: currentCol} = node.value;\n  const {row: nextRow, col: nextCol} = node.next.value;\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\n    return Direction.RIGHT;\n  }\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\n    return Direction.LEFT;\n  }\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\n    return Direction.DOWN;\n  }\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\n    return Direction.UP;\n  }\n  return '';\n};\n\nconst getGrowthNodeCoords = (snakeTail, currentDirection) => {\n  const tailNextNodeDirection = getNextNodeDirection(\n    snakeTail,\n    currentDirection,\n  );\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\n  const currentTailCoords = {\n    row: snakeTail.value.row,\n    col: snakeTail.value.col,\n  };\n  const growthNodeCoords = getCoordsInDirection(\n    currentTailCoords,\n    growthDirection,\n  );\n  return growthNodeCoords;\n};\n\nconst getOppositeDirection = direction => {\n  if (direction === Direction.UP) return Direction.DOWN;\n  if (direction === Direction.RIGHT) return Direction.LEFT;\n  if (direction === Direction.DOWN) return Direction.UP;\n  if (direction === Direction.LEFT) return Direction.RIGHT;\n};\n\nconst getCellClassName = (\n  cellValue,\n  foodCell,\n  foodShouldReverseDirection,\n  snakeCells,\n) => {\n  let className = 'cell';\n  if (cellValue === foodCell) {\n    if (foodShouldReverseDirection) {\n      className = 'cell cell-purple';\n    } else {\n      className = 'cell cell-red';\n    }\n  }\n  if (snakeCells.has(cellValue)) className = 'cell cell-green';\n\n  return className;\n};\n\nexport default Board;\n","import {useEffect, useRef} from 'react';\n\n// Copied from https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nexport function randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport function reverseLinkedList(head) {\n  let previousNode = null;\n  let currentNode = head;\n  while (currentNode !== null) {\n    const nextNode = currentNode.next;\n    currentNode.next = previousNode;\n    previousNode = currentNode;\n    currentNode = nextNode;\n  }\n  return previousNode;\n}\n","import Gameover from '../assets/gameover.PNG'\r\nimport { useStoreContext } from '../lib/globalstore'\r\n\r\nfunction GameOver(){\r\n    const [{end}, dispatch] = useStoreContext()\r\n\r\n    return (\r\n        <img src={Gameover} alt='Gameover' style={{display: end ? 'block' : 'none'}}/>\r\n    )\r\n}\r\n\r\nexport default GameOver","import React from 'react'\nimport Board from './Board/Board.jsx';\nimport Gameover from './Gameover/Gameover.jsx'\nimport { useStoreContext } from './lib/globalstore'\n\nimport './App.css';\n\nfunction App() {\n  const [{start, game, end}, dispatch] = useStoreContext()\n\n  return (\n    <>\n    <div className=\"App\">\n      <Board/>\n      <Gameover/>\n    </div>\n    </>\n    )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { StoreProvider} from './lib/globalstore'\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider>\n      <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}